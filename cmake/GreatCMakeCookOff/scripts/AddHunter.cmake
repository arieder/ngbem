if(_GREAT_COOKOFF_ADD_HUNTER)
  return()
endif()
set(_GREAT_COOKOFF_ADD_HUNTER TRUE)

include(CMakeParseArguments)

macro(initialize_hunter)
  cmake_parse_arguments(ih "NO_COOKOFF_RECIPES;LOCAL" "URL;SHA1;HUNTER_ROOT" "" ${ARGN})
  if(NOT ih_URL)
    if(ih_SHA1)
      message(FATAL_ERROR "URL AND SHA1 should be given together")
    endif()
    set(ih_URL "https://github.com/mdavezac/hunter/archive/extrepo-v1.0.tar.gz")
    set(ih_SHA1 "b2a37094bf181782c907335b89639b446226ff81")
  elseif(NOT ih_SHA1)
    message(FATAL_ERROR "URL AND SHA1 should be given together")
  endif()
  if(NOT ih_HUNTER_ROOT)
    set(ih_HUNTER_ROOT "${CMAKE_BINARY_DIR}/hunter")
  endif()
  include(HunterGate)
  if(NOT HUNTER_ROOT AND "$ENV{HUNTER_ROOT}" STREQUAL "")
    set(HUNTER_ROOT "${ih_HUNTER_ROOT}" CACHE PATH "Hunter root dir")
  endif()
  unset(local)
  if(ih_LOCAL)
    set(local LOCAL)
  endif()
  HunterGate(URL ${ih_URL} SHA1 ${ih_SHA1} ${local} ${ih_UNPARSED_ARGUMENTS})
  if(NOT ih_NO_COOKOFF_RECIPES)
    set(HUNTER_REPOSITORY_cookoff_DIRECTORY ${GREAT_CMAKE_COOKOFF_HUNTER_RECIPES_DIR})
    set(HUNTER_REPOSITORY_cookoff_URL "local")
    set(HUNTER_REPOSITORY_cookoff_SHA1 "none")
    set(HUNTER_REPOSITORY_cookoff_NAME cookoff)
    set(HUNTER_REPOSITORY_cookoff_VERSION "none")
    list(APPEND HUNTER_REPOSITORIES cookoff)
    list(APPEND HUNTER_RECIPE_DIRS "${HUNTER_REPOSITORY_cookoff_DIRECTORY}")
    list(APPEND CMAKE_MODULE_PATH "${HUNTER_REPOSITORY_cookoff_DIRECTORY}/find")
  endif()
endmacro()

macro(find_or_add_hunter_package package)
  cmake_parse_arguments(ah "CONFIG;MODULE" "PACKAGE" "" ${ARGN})
  if(NOT ah_PACKAGE)
    set(ah_PACKAGE ${package})
  endif()

  set(find_package_args ${ah_UNPARSED_ARGUMENTS})
  if(ah_CONFIG)
    list(APPEND find_package_args CONFIG)
  endif()
  if(ah_MODULE)
    list(APPEND find_package_args MODULE)
  endif()

  # First tries to find package
  set(do_hunter true)
  if(NOT ${ah_PACKAGE}_ADDED_VIA_HUNTER)
    find_package(${ah_PACKAGE} ${find_package_args})
    string(TOUPPER "${ah_PACKAGE}" AH_PACKAGE)
    if(${ah_PACKAGE}_FOUND OR ${AH_PACKAGE}_FOUND)
      set(do_hunter false)
    endif()
  endif()

  if(do_hunter)
    hunter_add_package(${package} ${ah_UNPARSED_ARGUMENTS})
    find_package(${ah_PACKAGE} REQUIRED ${find_package_args})
    set(
      ${ah_PACKAGE}_ADDED_VIA_HUNTER TRUE CACHE
      INTERNAL "${ah_PACKAGE} added via hunter" FORCE
    )
    mark_as_advanced(${ah_PACKAGE}_ADDED_VIA_HUNTER)
  endif()
endmacro()
