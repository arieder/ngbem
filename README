This addition to ngsolve allows to couple it with the boundary element library BEM++ ( www.bempp.org ).

The toplevel module both a C++ interface to do so, as well as a python module, allowing to
couple H1-ngsolve spaces of arbitrary order to piecewiese polynomial BEM++ spaces.

Alternatively, there exists a pure python version of the coupling code, which can be found in the "simple",
directory. It's api closely follows the FENICS interface provided by BEM++ and it can be used without
compiling a C++ module. The main drawback is, that it only allows first order discretizations. 
An example of how to use the module can be found in simple/example.py and simple/simple_helmholtz_fem_bem_coupling.py.



Building the C++ part:
To build the module you can do the usual

mkdir build
cd build 
cmake ..
make

sequence of commands. This will generate the c++ library as libngbem.so and the python module can be found in
build/python_package. Make sure the latter  directoriy is in your PYTHONPATH when attempting to use it.

In order to direct cmake to the correct version of BEM++, you can use the -DBempp_DIR="dir" flag.

If you encounter errors regarding mpi,  make sure you have compiled NGsolve with MPI support enabled.
This is required as all recent versions of BEM++ link to MPI, whith may cause problems.


An example of how to solve the laplace equation on R^d using a Johnson-Nedelec type FEM-BEM coupling
can be found in example.py
